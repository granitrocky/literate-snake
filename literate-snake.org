#+AUTHOR: Jonathan Kenyon
#+TITLE: Literate Programming Example -- Snake
#+OPTIONS: H:3 toc:2
#+HTML_HEAD: <style>canvas { margin-left: auto; margin-right: auto; display: block; } </style>
#+STARTUP: overview
#+MACRO: setup-file (eval (if (eq org-export-current-backend 'html) "#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-bigblow.setup"))
{{{setup-file}}}

# Local Variables:
# eval: (add-hook 'after-save-hook (lambda () (setq-local filename (org-html-export-to-html)) (rename-file filename "docs/index.html" t)) 0 t)
# End:

* Purpose
  This document is an attempt at putting a complete Bevy game and Design Document in a single file.

  We will be creating a document based on [[https://mbuffett.com/posts/bevy-snake-tutorial/][this tutorial]]

** Why?
   The reason for this workflow is to keep all our documentation and code in a single place. It's practice for creating a living org doc that will be my standard for creating projects in the future.

   That is, the code for this project is pulled directly from this document using ~org-babel~

** Final Program
  #+begin_src raw-html
     <script type="module">
       import init from './literate-snake.js'
       init()
     </script>
   #+end_src
   
* Specifications

** Use Bevy
   In our [[*Cargo File \[2022-07-19 Tue\]][Cargo File]], we define Bevy 0.7 as a dependency. Bevy allows us to create a game using ECS and built in 2D and 3D renderers and compile it to wasm32 for web games. In our case, we will be making a 2D snake game and embedding it in this file.
   
** Show a snake
   We will use the ~SnakeHead~ struct to hold the head of the body. 
** Move the snake
   The snake will always move forward, and pressing a key changes the direction.

   You will only be able to choose from the 2 directions to the left and right of the current heading
** Put the snake on a grid
   The snake needs to be confined to a grid for movement to replicate the original snake game
** Accept User input
   The only user input we need for now is the arrow keys.

   The Player can only turn the snake left or right.
** Make the Snake's tail follow the path the snake does
   Add a struct called ~SnakeTail~ that holds a single position
** Grow the snake when it collects pellets
   ~Pellets~ spawn in random locations around the grid and add 1 to the length of the snake's tail when picked up.
** End the game if the snake hits a wall or its tail
   If the snake enters a square that is either out of bounds or occupied by another tail segment, the game ends
** OPTIONAL Keep a score

* Code
** Cargo File   [2022-07-19 Tue]                                       :Code:
   #+begin_src conf-toml :tangle "Cargo.toml"
     [package]
     name = "literate-snake"
     version = "0.1.0"
     edition = "2021"

     [profile.release]
     opt-level = "z"
     lto = "thin"

     [profile.dev]
     opt-level = 1

     [profile.dev.package."*"]
     opt-level = 3

     [dependencies]
     bevy = "0.7"
     rand = "0.7.3"

     [target.wasm32-unknown-unknown]
     runner = "wasm-server-runner"
   #+end_src 
** Start The Game   [2022-07-19 Tue]                                   :Code:
   #+begin_src rust :tangle "src/main.rs"
     use bevy::prelude::*;

     fn main() {
         App::new()
             .insert_resource(WindowDescriptor {
                 width: 640.,
                 height: 480.,
                 ..default()
             })
             .add_startup_system(setup_camera)
             .add_startup_system(spawn_snake)
             .add_system(snake_movement)
             .add_system_set_to_stage(
                 CoreStage::PostUpdate,
                 SystemSet::new()
                     .with_system(position_translation)
                     .with_system(size_scaling),
             )
             .add_plugins(DefaultPlugins)
             .run();
     }
   #+end_src 
** Setup Camera   [2022-07-21 Thu]                                     :Code:
   #+begin_src rust :tangle "src/main.rs" :mkdirp yes :comments both
     fn setup_camera(mut commands: Commands){
         commands.spawn_bundle(OrthographicCameraBundle::new_2d());
     }
   #+end_src 
** Create Snake   [2022-07-21 Thu]                                     :Code:
   #+begin_src rust :tangle "src/main.rs" :mkdirp yes :comments both
     #[derive(Component)]
     struct SnakeHead;

     const SNAKE_HEAD_COLOR: Color = Color::rgb(0.7, 0.7, 0.7);

     fn spawn_snake(mut commands: Commands) {
         commands
             .spawn_bundle(SpriteBundle {
                 sprite: Sprite {
                     color: SNAKE_HEAD_COLOR,
                     ..default()
                 },
                 transform: Transform {
                     scale: Vec3::new(10.0, 10.0, 10.0),
                     ..default()
                 },
                 ..default()
             })
             .insert(SnakeHead)
             .insert(Position { x: 3, y: 3 })
             .insert(Size::square(0.8));
     }
   #+end_src 

** Control Snake   [2022-07-21 Thu]                                    :Code:
   #+begin_src rust :tangle "src/main.rs" :mkdirp yes :comments both
     fn snake_movement(
         keyboard_input: Res<Input<KeyCode>>,
         mut head_positions: Query<&mut Transform, With<SnakeHead>>,
     ) {
         for mut transform in head_positions.iter_mut() {
             match keyboard_input.get_pressed().next() {
                 Some(KeyCode::Left) => transform.translation.x -= 2.,
                 Some(KeyCode::Right) => transform.translation.x += 2.,
                 Some(KeyCode::Up) => transform.translation.y += 2.,
                 Some(KeyCode::Down) => transform.translation.y -= 2.,
                 _ => {}
             }
         };
     }
   #+end_src 
   
** Grid   [2022-07-21 Thu]                                             :Code:
 #+begin_src rust :tangle "src/main.rs" :mkdirp yes :comments both
   const ARENA_WIDTH: u32 = 10;
   const ARENA_HEIGHT: u32 = 10;

   #[derive(Component, Clone, Copy, PartialEq, Eq)]
   struct Position {
       x: i32,
       y: i32,
   }

   #[derive(Component)]
   struct Size {
       width: f32,
       height: f32,
   }

   impl Size {
       pub fn square(x: f32) -> Self {
           Self {
               width: x,
               height: x,
           }
       }
   }

   fn size_scaling(windows: Res<Windows>, mut q: Query<(&Size, &mut Transform)>) {
       let window = windows.get_primary().unwrap();
       for (sprite_size, mut transform) in q.iter_mut() {
           transform.scale = Vec3::new(
               sprite_size.width / ARENA_WIDTH as f32 * window.width() as f32,
               sprite_size.height / ARENA_HEIGHT as f32 * window.height() as f32,
               1.0,
           );
       }
   }

   fn position_translation(windows: Res<Windows>, mut q: Query<(&Position, &mut Transform)>) {
       fn convert(pos: f32, bound_window: f32, bound_game: f32) -> f32 {
           let tile_size = bound_window / bound_game;
           pos / bound_game * bound_window - (bound_window / 2.) + (tile_size / 2.)
       }
       let window = windows.get_primary().unwrap();
       for (pos, mut transform) in q.iter_mut() {
           transform.translation = Vec3::new(
               convert(pos.x as f32, window.width() as f32, ARENA_WIDTH as f32),
               convert(pos.y as f32, window.height() as f32, ARENA_HEIGHT as f32),
               0.0,
           );
       }
   }
 #+end_src 
 
 
